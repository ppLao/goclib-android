package org.goclib.android.utils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import android.app.Activity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

public final class ViewGroupUtil {
	public static View[] findViews(String nameFix, int len, View[] container,
			Activity context) {
		if (container == null)
			container = new View[len];
		String[] names = new String[len];
		for (int i = 0; i < len; i++) {
			names[i] = nameFix + "i";
		}
		return findViews(names, container, context);
	}

	public static View[] findViews(String[] nameFix, View[] container,
			Activity context) {
		if (container == null)
			container = new View[nameFix.length];
		int[] _temp=new int[nameFix.length];
		int len = container.length;
		for (int i = 0; i < len; i++) {
			int _id = ResourceUtil.getID(context, nameFix[i]);
			_temp[i]=_id;
		}
		return findViews(_temp, container, context);
	}
	
	public static View[] findViews(int[] resids,View[] container,Activity context){
		if (container == null)
			container = new View[resids.length];
		int len = container.length;
		for (int i = 0; i < len; i++) {
			View _view = context.findViewById(resids[i]);
			container[i] = _view;
		}
		return container;
	}
	public static List<View> findViews(int[] resids,Activity context){
		return Arrays.asList(findViews(resids,null, context));
	}
	public static List<View> findViews(String[] nameFix,Activity context){
		return Arrays.asList(findViews(nameFix,null, context));
	}
	
	public static View[] findViews(String nameFix, int len, View[] container,ViewGroup context) {
		if (container == null)
			container = new View[len];
		String[] names = new String[len];
		for (int i = 0; i < len; i++) {
			names[i] = nameFix + "i";
		}
		return findViews(names, container, context);
	}
	public static View[] findViews(String[] nameFix, View[] container,ViewGroup context) {
		if (container == null)
			container = new View[nameFix.length];
		int[] _temp=new int[nameFix.length];
		int len = container.length;
		for (int i = 0; i < len; i++) {
			int _id = ResourceUtil.getID(ApplicationUtils.defaultContext, nameFix[i]);
			_temp[i]=_id;
		}
		return findViews(_temp, container, context);
	}
	public static View[] findViews(int[] resids,View[] container,ViewGroup context){
		if (container == null)
			container = new View[resids.length];
		int len = container.length;
		for (int i = 0; i < len; i++) {
			View _view = context.findViewById(resids[i]);
			container[i] = _view;
		}
		return container;
	}
	public static List<View> findViews(int[] resids,ViewGroup context){
		return Arrays.asList(findViews(resids,null, context));
	}
	public static List<View> findViews(String[] nameFix,ViewGroup context){
		return Arrays.asList(findViews(nameFix,null, context));
	}
	
	public static <T> List<View> findViews(ViewGroup container,Class<T> cls){
		List<View>_result=null;
		int _len=container.getChildCount();
		for(int i=0;i<_len;i++){
			View _c = container.getChildAt(i);
			boolean _b=cls == null ? true : _c.getClass() == cls ;
			if(_b){
				if(_result == null)
					_result = new ArrayList<View>();
				_result.add(_c);
			}
		}
		return _result;
	}

	public static List<View>findViews(ViewGroup container){
		return findViews(container, null);
	}
	
	public static void setVisibility(View view, boolean visible, boolean isGone) {
		if (view == null)
			return;
		view.setVisibility(visible ? View.VISIBLE : (isGone ? View.GONE
				: View.INVISIBLE));
	}

	public static void setVisibility(View view, boolean visible) {
		setVisibility(view, visible, true);
	}
	
	public static boolean setText(View view,String string){
		boolean _result=view instanceof TextView;
		if(_result)
			((TextView)view).setText(string);
		return _result;
	}
	public static boolean setHint(View view,String string){
		boolean _result=view instanceof TextView;
		if(_result)
			((TextView)view).setHint(string);
		return _result;
	}
}
